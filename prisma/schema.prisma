// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
  CORRETOR
}

enum Status {
  ACTIVE
  INACTIVE
}



model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

   role          Role      @default(CLIENT)
   status        Status    @default(INACTIVE)

   userDetails   UserDetails? 
   corretor      Corretor?

   // Relacionamentos com AuditLog
   auditLogs     AuditLog[] // Logs das ações realizadas por este usuário
   targetLogs    AuditLog[] @relation("TargetUser") // Logs onde este usuário foi o alvo da ação

  @@unique([email])
  @@map("user")
}

model UserDetails {
  id        String   @id @default(uuid())
  nome      String?  // pode ser null
  preco     Float?   // pode ser null
  cpfCnpj   String?  // pode ser null
  telefone  String?  // pode ser null
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_details")
}


model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Corretor {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  telefone  String?
  cpf       String?  @unique
  creci     String?  @unique
  comissao  Float?   @default(0)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com User (um corretor pode ter uma conta de usuário)
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Relacionamento com Leads
  leads     Lead[]

  @@map("corretor")
}

model Lead {
  id          String   @id @default(uuid())
  nome        String
  telefone    String
  corretorId  String
  statusId    String?  // Relacionamento com StatusCustom (opcional para compatibilidade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com Corretor
  corretor    Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)
  
  // Relacionamento com Status
  status      StatusCustom? @relation(fields: [statusId], references: [id], onDelete: SetNull)

  @@map("lead")
}

model StatusCustom {
  id          String     @id @default(uuid())
  nome        String     @unique
  descricao   String?
  cor         String?    @default("#6B7280") // cor em hex para identificação visual
  ativo       Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamento com Leads
  leads       Lead[]

  @@map("status_custom")
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VIEW
  EXPORT
}

model AuditLog {
  id            String     @id @default(uuid())
  acao          ActionType // Tipo da ação realizada
  entidade      String     // Nome da entidade afetada (ex: "Lead", "User", "Corretor")
  entidadeId    String?    // ID da entidade afetada (pode ser null para ações gerais)
  descricao     String     // Descrição detalhada da ação
  dadosAntigos  Json?      // Dados antes da alteração (para UPDATE/DELETE)
  dadosNovos    Json?      // Dados após a alteração (para CREATE/UPDATE)
  ipAddress     String?    // IP do usuário que realizou a ação
  userAgent     String?    // User agent do navegador
  createdAt     DateTime   @default(now())

  // Relacionamentos
  usuarioId     String?    // ID do usuário que realizou a ação
  usuario       User?      @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  
  alvoUsuarioId String?    // ID do usuário que foi afetado pela ação (quando aplicável)
  alvoUsuario   User?      @relation("TargetUser", fields: [alvoUsuarioId], references: [id], onDelete: SetNull)

  @@map("audit_log")
}
