// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMFULL      // Administrador completo do sistema (pode criar imobiliárias e admins)
  SUPER_ADMIN  // Administrador do sistema (pode gerenciar imobiliárias)
  ADMIN        // Administrador de imobiliária
  CLIENT
  CORRETOR
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ObrigatoriedadeDocumento {
  OBRIGATORIO
  OPCIONAL
  NAO_APLICAVEL
}



model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

   role          Role      @default(CLIENT)
   status        Status    @default(INACTIVE)

   // Relacionamento com Imobiliária (para ADMIN)
   imobiliariaId String?
   imobiliaria   Imobiliaria? @relation(fields: [imobiliariaId], references: [id], onDelete: SetNull)

   userDetails   UserDetails? 

   // Relacionamentos com Lead (para corretores)
   leads         Lead[]

   // Novo relacionamento com Equipe (opcional)
   equipeId      String?
   equipe        Equipe?   @relation(fields: [equipeId], references: [id], onDelete: SetNull)

   leadObservacoes LeadObservacao[] @relation("LeadObservacoes")

   // Relacionamentos com AuditLog
   auditLogs     AuditLog[] // Logs das ações realizadas por este usuário
   targetLogs    AuditLog[] @relation("TargetUser") // Logs onde este usuário foi o alvo da ação

   // Relacionamento com WhatsApp Instance (para corretores)
   whatsappInstance WhatsAppInstance?

   // Relacionamento com Listas de Transmissão
   broadcastLists BroadcastList[]

   // Relacionamento com Documentos dos Leads (uploads)
   documentosUpload LeadDocumento[] @relation("DocumentosUpload")

   // Relacionamento com Mensagens de Remarketing
   mensagensRemarketing MensagemRemarketing[]

  @@unique([email])
  @@map("user")
}

model UserDetails {
  id        String   @id @default(uuid())
  nome      String?  // pode ser null
  preco     Float?   // pode ser null
  cpfCnpj   String?  // pode ser null
  telefone  String?  // pode ser null
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_details")
}

model Imobiliaria {
  id          String   @id @default(uuid())
  nome        String
  cnpj        String?  @unique
  telefone    String?
  email       String?
  endereco    String?
  cidade      String?
  estado      String?
  cep         String?
  logo        String?  // URL da logo
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  usuarios    User[]   // Usuários da imobiliária (administradores e corretores)
  leads       Lead[]   // Leads da imobiliária
  status      StatusCustom[] // Status personalizados da imobiliária
  broadcastLists BroadcastList[] // Listas de transmissão da imobiliária
  documentacoes Documentacao[] // Documentações da imobiliária
  // Novo relacionamento com Equipes
  equipes     Equipe[]

  @@map("imobiliaria")
}

// Novo modelo Equipe
model Equipe {
  id            String      @id @default(uuid())
  nome          String
  ativo         Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relacionamento com Imobiliária
  imobiliariaId String
  imobiliaria   Imobiliaria @relation(fields: [imobiliariaId], references: [id], onDelete: Cascade)

  // Usuários pertencentes à equipe
  usuarios      User[]

  @@map("equipe")
}


model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}



model Lead {
  id            String   @id @default(uuid())
  nome          String
  telefone      String
  // Novos campos para leads de imobiliária
  regiao        String?
  temDependente Boolean? @default(false)
  valorRenda    Float?
  tipoRenda     String?
  
  // userId opcional para permitir leads sem corretor associado
  userId        String?
  imobiliariaId String   // Todo lead deve pertencer a uma imobiliária
  statusId      String?  // Relacionamento com StatusCustom (opcional para compatibilidade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamento com User (corretor) opcional
  user          User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Relacionamento com Imobiliária
  imobiliaria   Imobiliaria @relation(fields: [imobiliariaId], references: [id], onDelete: Cascade)
  
  // Relacionamento com Status
  status        StatusCustom? @relation(fields: [statusId], references: [id], onDelete: SetNull)

  // Relacionamento com Observações
  observacoes   LeadObservacao[]

  // Relacionamento com Documentos
  documentos    LeadDocumento[]

  @@map("lead")
}

model LeadObservacao {
  id              String   @id @default(uuid())
  leadId          String   // ID do lead
  usuarioId       String   // ID do usuário que fez a observação
  observacao      String   // Texto da observação
  statusAnterior  String?  // Status anterior (se houve mudança)
  statusNovo      String?  // Novo status (se houve mudança)
  tipoAcao        String   @default("OBSERVACAO") // OBSERVACAO, MUDANCA_STATUS, CRIACAO
  createdAt       DateTime @default(now())

  // Relacionamentos
  lead            Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  usuario         User @relation("LeadObservacoes", fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("lead_observacao")
}

model StatusCustom {
  id            String      @id @default(uuid())
  nome          String
  descricao     String?
  cor           String?     @default("#6B7280") // cor em hex para identificação visual
  ativo         Boolean     @default(true)
  imobiliariaId String?     // Status pode ser global (null) ou específico de uma imobiliária
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relacionamento com Imobiliária
  imobiliaria   Imobiliaria? @relation(fields: [imobiliariaId], references: [id], onDelete: Cascade)

  // Relacionamento com Leads
  leads         Lead[]

  @@unique([nome, imobiliariaId]) // Nome único por imobiliária
  @@map("status_custom")
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VIEW
  EXPORT
}

model AuditLog {
  id            String     @id @default(uuid())
  acao          ActionType // Tipo da ação realizada
  entidade      String     // Nome da entidade afetada (ex: "Lead", "User", "Corretor")
  entidadeId    String?    // ID da entidade afetada (pode ser null para ações gerais)
  descricao     String     // Descrição detalhada da ação
  dadosAntigos  Json?      // Dados antes da alteração (para UPDATE/DELETE)
  dadosNovos    Json?      // Dados após a alteração (para CREATE/UPDATE)
  ipAddress     String?    // IP do usuário que realizou a ação
  userAgent     String?    // User agent do navegador
  createdAt     DateTime   @default(now())

  // Relacionamentos
  usuarioId     String?    // ID do usuário que realizou a ação
  usuario       User?      @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  
  alvoUsuarioId String?    // ID do usuário que foi afetado pela ação (quando aplicável)
  alvoUsuario   User?      @relation("TargetUser", fields: [alvoUsuarioId], references: [id], onDelete: SetNull)

  @@map("audit_log")
}

enum WhatsAppStatus {
  CREATING     // Instância sendo criada
  ACTIVE       // Instância ativa e conectada
  DISCONNECTED // Instância desconectada
  ERROR        // Erro na instância
  DELETED      // Instância deletada
}

model WhatsAppInstance {
  id            String        @id @default(uuid())
  instanceName  String        @unique // Nome da instância no Evolution API
  clientName    String        // Nome do cliente
  token         String        @unique // Token da instância para integração
  status        WhatsAppStatus @default(CREATING)
  qrCode        String?       // QR Code para conexão (quando disponível)
  connected     Boolean       @default(false)
  phoneNumber   String?       // Número do WhatsApp conectado
  profileName   String?       // Nome do perfil do WhatsApp
  errorMessage  String?       // Mensagem de erro (se houver)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  connectedAt   DateTime?     // Data/hora da última conexão
  
  // Relacionamento com User (corretor) - um corretor pode ter apenas uma instância
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento com Listas de Transmissão
  broadcastLists BroadcastList[]

  @@map("whatsapp_instance")
}

model BroadcastList {
  id            String    @id @default(uuid())
  nome          String    // Nome da lista de transmissão
  mensagem      String    // Mensagem a ser enviada
  contatos      Json      // Array de objetos {nome: string, telefone: string}
  ativo         Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamento com User (corretor que criou a lista)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relacionamento com Imobiliária
  imobiliariaId String
  imobiliaria   Imobiliaria @relation(fields: [imobiliariaId], references: [id], onDelete: Cascade)
  
  // Relacionamento com WhatsApp Instance
  whatsappInstanceId String?
  whatsappInstance   WhatsAppInstance? @relation(fields: [whatsappInstanceId], references: [id], onDelete: SetNull)

  @@map("broadcast_list")
}

model Documentacao {
  id            String                    @id @default(uuid())
  nome          String                    // Nome da documentação (ex: "RG", "CPF", "Comprovante de Renda")
  obrigatoriedade ObrigatoriedadeDocumento @default(OPCIONAL) // Nível de obrigatoriedade
  ativo         Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  // Relacionamento com Imobiliária (documentações podem ser específicas por imobiliária)
  imobiliariaId String?
  imobiliaria   Imobiliaria? @relation(fields: [imobiliariaId], references: [id], onDelete: Cascade)

  // Relacionamento com Documentos dos Leads
  leadDocumentos LeadDocumento[]

  @@unique([nome, imobiliariaId]) // Nome único por imobiliária
  @@map("documentacao")
}

model LeadDocumento {
  id              String   @id @default(uuid())
  leadId          String   // ID do lead
  documentacaoId  String   // ID da documentação (tipo de documento)
  nomeArquivo     String   // Nome original do arquivo
  urlS3           String   // URL do arquivo no S3
  tamanho         Int      // Tamanho do arquivo em bytes
  tipoMime        String   // Tipo MIME do arquivo
  uploadedBy      String   // ID do usuário que fez o upload
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  lead            Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  documentacao    Documentacao @relation(fields: [documentacaoId], references: [id], onDelete: Cascade)
  usuario         User @relation("DocumentosUpload", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@unique([leadId, documentacaoId]) // Um documento por tipo por lead
  @@map("lead_documento")
}

model MensagemRemarketing {
  id                  String   @id @default(uuid())
  mensagem            String   // Texto completo da mensagem
  idcorretor          String   // ID do corretor
  datacriada          DateTime @default(now()) // Data/hora de criação do registro
  dias_disparo        Int      // Quantidade de dias para o remarketing (1, 2, 7, 14 ou 30)
  status              Boolean  @default(true) // Ativo/inativo
  ultima_atualizacao  DateTime @updatedAt // Data/hora da última modificação

  // Relacionamento com User (corretor)
  corretor            User @relation(fields: [idcorretor], references: [id], onDelete: Cascade)

  @@unique([idcorretor, dias_disparo]) // Uma mensagem por dia por corretor
  @@map("mensagem_remarketing")
}
